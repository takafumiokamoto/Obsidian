# AWS CLI run-task subnet specification
Created: 6/19/2025, 3:36:54 PM
Last Updated: 6/19/2025, 3:36:54 PM
---

### User

When Using “run-task” in AWS cli, is it able to specify subnet by name instead of id?


---

### Assistant (gemini-2.5-pro)

<details>
<summary>Reasoning</summary>

**Dissecting the Query**

I've homed in on the user's focus: using the AWS CLI, specifically the `run-task` command. This instantly points to Amazon ECS. My thinking is now centered on the parameters of that command, specifically those related to subnet specification.


**Refining Subnet Identification**

I've confirmed the documentation's stance: subnet IDs are the way to go with `run-task`. My focus now shifts to exploring potential workarounds. Perhaps a script could resolve names to IDs, or AWS CloudFormation could manage this seamlessly. My next step involves investigating the feasibility and practicality of these options.


**Exploring Potential Workarounds**

I've just concluded that the `run-task` command demands subnet IDs. Now I'm delving deeper into a key consideration: can I automate the ID lookup based on the subnet name? I'm thinking of scripting, or perhaps a CloudFormation stack. My focus is on finding the most streamlined method.


**Devising the Implementation**

I've crafted a comprehensive script outline. Now, the focus is on the crucial step: obtaining the subnet ID programmatically. My current approach involves utilizing the `aws ec2 describe-subnets` command with specific filters and a JMESPath query. The goal is to capture the ID, ready for use within the `run-task` command's `--subnets` parameter.


**Constructing the Script**

I'm now fully immersed in developing the script structure, specifically the command needed to procure the subnet ID, to feed into `run-task`. I'm using `aws ec2 describe-subnets` with filters and JMESPath queries, with output directed to a variable. The target is now clear: ensure this ID lookup is robust and accurate, ready for seamless integration.


**Script Refinement and Testing**

I've just finalized the script's core components: the crucial subnet ID retrieval using `aws ec2 describe-subnets` combined with JMESPath for precise data extraction. My focus has shifted to rigorous testing to ensure the lookup consistently yields the correct subnet ID. The immediate next task is to integrate error handling for common issues, such as the subnet not existing or ambiguous names.


**Automating the ID Lookup**

I'm now zeroing in on a working solution. My focus is on automating the retrieval of the subnet ID using a script. It involves AWS CLI commands: first `describe-subnets`, then filtering, and finally a JMESPath query. The goal is to make it simple to get the ID programmatically.



</details>

Excellent question. This is a very common point of confusion when working with the AWS CLI.

The short answer is **no**, you cannot directly specify a subnet by its name tag when using the `aws ecs run-task` command.

The AWS API, and by extension the AWS CLI, requires the unique resource identifier for the subnet, which looks like `subnet-xxxxxxxxxxxxxxxxx`.

### Why AWS Requires IDs Instead of Names

The primary reason is **uniqueness**. In AWS:

*   **Resource IDs** (like `subnet-0123456789abcdef0`, `vpc-abcdef1234567890`, etc.) are guaranteed to be unique within their scope (e.g., region).
*   **Names** are typically just a `Name` tag applied to the resource. You could accidentally have multiple subnets with the exact same name, even within the same VPC. If the CLI accepted a name, it wouldn't know which resource you were referring to, leading to ambiguity and potential errors.

### The Solution: Look Up the ID First

The standard and recommended practice is to perform a two-step process in your scripts:

1.  **Describe the subnet** using its `Name` tag to retrieve its unique ID.
2.  **Use that retrieved ID** in your `run-task` command.

This makes your scripts both readable (you can define names at the top) and robust (they use the unique ID for the actual API call).

---

### Example Script

Here is a complete bash script example that demonstrates how to achieve this. This script looks up a subnet ID and a security group ID by their names and then uses them to launch an ECS task.

Let's assume:
*   You have a subnet with a `Name` tag of `my-app-subnet-a`.
*   You have a security group with a `Name` tag of `my-app-sg`.

```bash
#!/bin/bash

# --- Configuration ---
# Set the human-readable names of your resources here
CLUSTER_NAME="my-production-cluster"
TASK_DEFINITION="my-web-app:3" # Task definition name and revision
SUBNET_NAME="my-app-subnet-a"
SECURITY_GROUP_NAME="my-app-sg"
AWS_REGION="us-east-1"

# --- Step 1: Look up resource IDs from their names ---

echo "Fetching ID for subnet named '$SUBNET_NAME'..."

# Use 'aws ec2 describe-subnets' to find the subnet by its 'Name' tag.
# The --query parameter extracts just the SubnetId.
# The --output text parameter returns the raw string without quotes.
SUBNET_ID=$(aws ec2 describe-subnets \
  --filters "Name=tag:Name,Values=$SUBNET_NAME" \
  --query "Subnets[0].SubnetId" \
  --output text \
  --region $AWS_REGION)

# Error handling: exit if the subnet was not found
if [ -z "$SUBNET_ID" ] || [ "$SUBNET_ID" == "None" ]; then
  echo "Error: Subnet with name '$SUBNET_NAME' not found."
  exit 1
fi

echo "Found Subnet ID: $SUBNET_ID"

echo "Fetching ID for security group named '$SECURITY_GROUP_NAME'..."

# Use 'aws ec2 describe-security-groups' to find the SG by its name.
SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
  --filters "Name=group-name,Values=$SECURITY_GROUP_NAME" \
  --query "SecurityGroups[0].GroupId" \
  --output text \
  --region $AWS_REGION)

# Error handling: exit if the security group was not found
if [ -z "$SECURITY_GROUP_ID" ] || [ "$SECURITY_GROUP_ID" == "None" ]; then
  echo "Error: Security Group with name '$SECURITY_GROUP_NAME' not found."
  exit 1
fi

echo "Found Security Group ID: $SECURITY_GROUP_ID"


# --- Step 2: Run the ECS Task using the fetched IDs ---

echo "Running ECS task..."

aws ecs run-task \
  --cluster $CLUSTER_NAME \
  --task-definition $TASK_DEFINITION \
  --launch-type FARGATE \
  --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
  --region $AWS_REGION

echo "Task launch command sent."
```

### Handling Multiple Subnets

If you want to provide high availability by launching your task across multiple subnets, you can adapt the script. Let's say you have subnets named `my-app-subnet-a` and `my-app-subnet-b`.

You can use the `jq` tool (a lightweight command-line JSON processor) to make this easier.

```bash
#!/bin/bash

# --- Configuration ---
CLUSTER_NAME="my-production-cluster"
TASK_DEFINITION="my-web-app:3"
# Use a wildcard to match multiple subnets
SUBNET_NAME_PATTERN="my-app-subnet-*"
SECURITY_GROUP_NAME="my-app-sg"
AWS_REGION="us-east-1"

# --- Look up IDs ---

echo "Fetching IDs for subnets matching '$SUBNET_NAME_PATTERN'..."

# This command gets all matching subnet IDs and formats them
# into a comma-separated string like "subnet-111,subnet-222"
SUBNET_IDS=$(aws ec2 describe-subnets \
  --filters "Name=tag:Name,Values=$SUBNET_NAME_PATTERN" \
  --query "Subnets[].SubnetId" \
  --output json \
  --region $AWS_REGION | jq -r '. | join(",")')

if [ -z "$SUBNET_IDS" ]; then
  echo "Error: No subnets found matching pattern '$SUBNET_NAME_PATTERN'."
  exit 1
fi

echo "Found Subnet IDs: $SUBNET_IDS"

# ... (Security group lookup remains the same) ...
SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
  --filters "Name=group-name,Values=$SECURITY_GROUP_NAME" \
  --query "SecurityGroups[0].GroupId" \
  --output text \
  --region $AWS_REGION)

# --- Run the Task ---

echo "Running ECS task..."

aws ecs run-task \
  --cluster $CLUSTER_NAME \
  --task-definition $TASK_DEFINITION \
  --launch-type FARGATE \
  --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
  --region $AWS_REGION

echo "Task launch command sent."
```


---
